var serviceWorkerOption = {
  "assets": [
    "/icons.eot",
    "/icons.ttf",
    "/icons.svg",
    "/fontawesome-webfont.eot",
    "/fontawesome-webfont.ttf",
    "/fontawesome-webfont.svg",
    "/app.bundle.js",
    "/app.vendor.bundle.js",
    "/app.styles.css"
  ]
};
        
        /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var doCache = true;

// Name our cache
var CACHE_NAME = 'pwa-cache-v1';

// Delete old caches that are not our current one!
self.addEventListener("activate", function (event) {
  var cacheWhitelist = [CACHE_NAME];
  event.waitUntil(caches.keys().then(function (keyList) {
    return Promise.all(keyList.map(function (key) {
      if (!cacheWhitelist.includes(key)) {
        console.log('Deleting cache: ' + key);
        return caches.delete(key);
      }
    }));
  }));
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function (event) {
  if (doCache) {
    event.waitUntil(caches.open(CACHE_NAME).then(function (cache) {
      // Get the assets manifest so we can see what our js file is named
      // This is because webpack hashes it

      // Open a cache and cache our files
      // We want to cache the page and the main.js generated by webpack
      // We could also cache any static assets like CSS or images
      var urlsToCache = ["/",'/public/assets/icon.png','/public/assets/icon512x512.png','manifest.json' ,"/index.html", '/offline.html', '/public/assets/app.bundle.js', '/public/assets/app.styles.css', '/public/assets/app.vendor.bundle.js'];
      console.log('cached');
      return cache.addAll(urlsToCache);
    }));
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function (event) {
  if (doCache) {
    event.respondWith(caches.match(event.request).then(function (response) {
      if (response) {
        console.log('res1', response);
        return response;
      }

      return fetch(event.request).then(function (res) {
        if (res.status === 404) {
          return caches.match('/offline.html');
        }
        console.log('res', res);
        return res;
      });
    }));
  }
});
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(doCache, 'doCache', 'C:/Users/Pozterz/Desktop/Workspace/React/tdw/src/sw.js');

  __REACT_HOT_LOADER__.register(CACHE_NAME, 'CACHE_NAME', 'C:/Users/Pozterz/Desktop/Workspace/React/tdw/src/sw.js');
}();

;

/***/ })
/******/ ]);
//# sourceMappingURL=sw.js.map